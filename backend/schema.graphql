# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  password: PasswordState
  apiKey: String
  money: Int
  email: String
  trades(where: TradeWhereInput! = {}, orderBy: [TradeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trade!]
  tradesCount(where: TradeWhereInput! = {}): Int
  stocks(where: StockWhereInput! = {}, orderBy: [StockOrderByInput!]! = [], take: Int, skip: Int! = 0): [Stock!]
  stocksCount(where: StockWhereInput! = {}): Int
  shortTermTaxes: Int
  longTermTaxes: Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  apiKey: StringFilter
  money: IntFilter
  email: StringFilter
  trades: TradeManyRelationFilter
  stocks: StockManyRelationFilter
  shortTermTaxes: IntNullableFilter
  longTermTaxes: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input TradeManyRelationFilter {
  every: TradeWhereInput
  some: TradeWhereInput
  none: TradeWhereInput
}

input StockManyRelationFilter {
  every: StockWhereInput
  some: StockWhereInput
  none: StockWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  apiKey: OrderDirection
  money: OrderDirection
  email: OrderDirection
  shortTermTaxes: OrderDirection
  longTermTaxes: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  password: String
  apiKey: String
  money: Int
  email: String
  trades: TradeRelateToManyForUpdateInput
  stocks: StockRelateToManyForUpdateInput
  shortTermTaxes: Int
  longTermTaxes: Int
  createdAt: DateTime
}

input TradeRelateToManyForUpdateInput {
  disconnect: [TradeWhereUniqueInput!]
  set: [TradeWhereUniqueInput!]
  create: [TradeCreateInput!]
  connect: [TradeWhereUniqueInput!]
}

input StockRelateToManyForUpdateInput {
  disconnect: [StockWhereUniqueInput!]
  set: [StockWhereUniqueInput!]
  create: [StockCreateInput!]
  connect: [StockWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  password: String
  apiKey: String
  money: Int
  email: String
  trades: TradeRelateToManyForCreateInput
  stocks: StockRelateToManyForCreateInput
  shortTermTaxes: Int
  longTermTaxes: Int
  createdAt: DateTime
}

input TradeRelateToManyForCreateInput {
  create: [TradeCreateInput!]
  connect: [TradeWhereUniqueInput!]
}

input StockRelateToManyForCreateInput {
  create: [StockCreateInput!]
  connect: [StockWhereUniqueInput!]
}

type Trade {
  id: ID!
  symbol: String
  amount: Int
  price: Int
  dateOfTrade: DateTime
  buySell: Boolean!
  owner: User
}

input TradeWhereUniqueInput {
  id: ID
}

input TradeWhereInput {
  AND: [TradeWhereInput!]
  OR: [TradeWhereInput!]
  NOT: [TradeWhereInput!]
  id: IDFilter
  symbol: StringFilter
  amount: IntFilter
  price: IntFilter
  dateOfTrade: DateTimeNullableFilter
  buySell: BooleanFilter
  owner: UserWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input TradeOrderByInput {
  id: OrderDirection
  symbol: OrderDirection
  amount: OrderDirection
  price: OrderDirection
  dateOfTrade: OrderDirection
  buySell: OrderDirection
}

input TradeUpdateInput {
  symbol: String
  amount: Int
  price: Int
  dateOfTrade: DateTime
  buySell: Boolean
  owner: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TradeUpdateArgs {
  where: TradeWhereUniqueInput!
  data: TradeUpdateInput!
}

input TradeCreateInput {
  symbol: String
  amount: Int
  price: Int
  dateOfTrade: DateTime
  buySell: Boolean! = true
  owner: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Stock {
  id: ID!
  symbol: String
  amount: Int
  price: Int
  createdAt: DateTime
  dateOfTrade: DateTime
  owner: User
}

input StockWhereUniqueInput {
  id: ID
}

input StockWhereInput {
  AND: [StockWhereInput!]
  OR: [StockWhereInput!]
  NOT: [StockWhereInput!]
  id: IDFilter
  symbol: StringFilter
  amount: IntFilter
  price: IntFilter
  createdAt: DateTimeNullableFilter
  dateOfTrade: DateTimeNullableFilter
  owner: UserWhereInput
}

input StockOrderByInput {
  id: OrderDirection
  symbol: OrderDirection
  amount: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  dateOfTrade: OrderDirection
}

input StockUpdateInput {
  symbol: String
  amount: Int
  price: Int
  createdAt: DateTime
  dateOfTrade: DateTime
  owner: UserRelateToOneForUpdateInput
}

input StockUpdateArgs {
  where: StockWhereUniqueInput!
  data: StockUpdateInput!
}

input StockCreateInput {
  symbol: String
  amount: Int
  price: Int
  createdAt: DateTime
  dateOfTrade: DateTime
  owner: UserRelateToOneForCreateInput
}

type CacheStorage {
  id: ID!
  symbol: String
  price: Int
  identifier: String
  createdAt: DateTime
  date: DateTime
}

input CacheStorageWhereUniqueInput {
  id: ID
  identifier: String
}

input CacheStorageWhereInput {
  AND: [CacheStorageWhereInput!]
  OR: [CacheStorageWhereInput!]
  NOT: [CacheStorageWhereInput!]
  id: IDFilter
  symbol: StringFilter
  price: IntFilter
  identifier: StringFilter
  createdAt: DateTimeNullableFilter
  date: DateTimeNullableFilter
}

input CacheStorageOrderByInput {
  id: OrderDirection
  symbol: OrderDirection
  price: OrderDirection
  identifier: OrderDirection
  createdAt: OrderDirection
  date: OrderDirection
}

input CacheStorageUpdateInput {
  symbol: String
  price: Int
  identifier: String
  createdAt: DateTime
  date: DateTime
}

input CacheStorageUpdateArgs {
  where: CacheStorageWhereUniqueInput!
  data: CacheStorageUpdateInput!
}

input CacheStorageCreateInput {
  symbol: String
  price: Int
  identifier: String
  createdAt: DateTime
  date: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTrade(data: TradeCreateInput!): Trade
  createTrades(data: [TradeCreateInput!]!): [Trade]
  updateTrade(where: TradeWhereUniqueInput!, data: TradeUpdateInput!): Trade
  updateTrades(data: [TradeUpdateArgs!]!): [Trade]
  deleteTrade(where: TradeWhereUniqueInput!): Trade
  deleteTrades(where: [TradeWhereUniqueInput!]!): [Trade]
  createStock(data: StockCreateInput!): Stock
  createStocks(data: [StockCreateInput!]!): [Stock]
  updateStock(where: StockWhereUniqueInput!, data: StockUpdateInput!): Stock
  updateStocks(data: [StockUpdateArgs!]!): [Stock]
  deleteStock(where: StockWhereUniqueInput!): Stock
  deleteStocks(where: [StockWhereUniqueInput!]!): [Stock]
  createCacheStorage(data: CacheStorageCreateInput!): CacheStorage
  createCacheStorages(data: [CacheStorageCreateInput!]!): [CacheStorage]
  updateCacheStorage(where: CacheStorageWhereUniqueInput!, data: CacheStorageUpdateInput!): CacheStorage
  updateCacheStorages(data: [CacheStorageUpdateArgs!]!): [CacheStorage]
  deleteCacheStorage(where: CacheStorageWhereUniqueInput!): CacheStorage
  deleteCacheStorages(where: [CacheStorageWhereUniqueInput!]!): [CacheStorage]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  buyStock(stockPrice: Float!, stockSymbol: String!, amount: Float!, dateOfTrade: String): Trade
  sellStock(taxes: Boolean, stockPrice: Float!, stockSymbol: String!, amount: Float!, dateOfTrade: String): Trade
  sellFromStock(taxes: Boolean, stockPrice: Float!, stockSymbol: String!, amount: Float!, dateOfTrade: String, stockID: ID!): Trade
  sellAllStock(taxes: Boolean, stockPrice: Float!, stockSymbol: String!, dateOfTrade: String, stockID: ID!): Trade
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  password: String
  apiKey: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  trades(where: TradeWhereInput! = {}, orderBy: [TradeOrderByInput!]! = [], take: Int, skip: Int! = 0): [Trade!]
  trade(where: TradeWhereUniqueInput!): Trade
  tradesCount(where: TradeWhereInput! = {}): Int
  stocks(where: StockWhereInput! = {}, orderBy: [StockOrderByInput!]! = [], take: Int, skip: Int! = 0): [Stock!]
  stock(where: StockWhereUniqueInput!): Stock
  stocksCount(where: StockWhereInput! = {}): Int
  cacheStorages(where: CacheStorageWhereInput! = {}, orderBy: [CacheStorageOrderByInput!]! = [], take: Int, skip: Int! = 0): [CacheStorage!]
  cacheStorage(where: CacheStorageWhereUniqueInput!): CacheStorage
  cacheStoragesCount(where: CacheStorageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
